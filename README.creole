This is a [[http://www.wikicreole.org/|WikiCreole]] parser in
[[http://www.emacswiki.org/emacs/EmacsLisp|EmacsLisp]].

== Rationale ==

We have [[http://www.emacswiki.org/emacs/EmacsMuse|Emacs Muse]] and we
have [[http://www.emacswiki.org/emacs/OrgMode|OrgMode]] as wiki/blog
makers but neither is close to the Creole syntax which is actually the
syntax used on the [[http://EmacsWiki.org|EmacsWiki]].

WikiCreole is closest to the OddMuse syntax used there. It also
happens to be my favorite Wiki syntax.

The combination of this and
[[http://emacswiki.org/wiki/Elnode|Elnode]] should make a complete
EmacsLisp EmacsWiki a possibility. Also a blog engine and all sorts of
other simple content based things.

I even like the idea of using WikiCreole as a kind of base language
for every HTML template I write, rather than HTML.

== Compliance ==

This is early stages so it's not fully compliant with WikiCreole
yet. Here is the [[http://www.wikicreole.org/attach/Creole1.0TestCases/creole1.0test.txt|WikiCreole test document]] 
and we don't handle some big things and all of what I'd call the exceptions:

* not ending headings with an appropriate {{{=}}}
* having whitespace before list items
* no tables
* no escapes

== Tests ==

We do have a somewhat comprehensive {{{ERT}}} suite for the code we do
have. The tests are embedded in the code.


== Extensions ==

We support 1 extension over Creole right now, fontifying PRE sections
with extra markup:

{{{
##! emacs-lisp
(defun creole-structure (lst)
  "Make a parsed structure from a list."
  (let* ((docptr lst)
         (state '()) ; used as a stack
         (result '()))
    (while docptr
      (let* ((token (car docptr))
             (lst-item (creole--list-item (car token))))
        (case (if lst-item 'listitem (car token))
          (listitem
           (let* ((last (if (car state) (cdar state)))
                  (last-level (if (car state) (caar state)))
                  (new (list (car lst-item) (cdr token))))
             (cond
              ;; Current level is higher than the last, embed a new list
              ((and last
                    (> (cdr lst-item) last-level))
               (setcdr last (append (cdr last) (list new)))
               ;; Update the stack
               (push (cons (cdr lst-item) new) state))
              ;; Current level is same as the last, extend the last list
              ((and last
                    (= (cdr lst-item) last-level))
               (setq new (list (cdr token)))
               (setcdr last (append (cdr last) new))
               ;; Reset the top of the stack
               (pop state)
               (push (cons (cdr lst-item) new) state))
              ;; Current level is same as the last, extend the last list
              ((and last
                    (< (cdr lst-item) last-level))
               (loop for i from 1 to (- last-level (cdr lst-item))
                     do (pop state))
               (let* ((last (if (car state) (cdar state)))
                      (last-level (if (car state) (caar state))))
                 (setq new (list (cdr token)))
                 (setcdr last (append (cdr last) new))))
              ;; The default action when we're dealing with lists
              (t
               (setq result (append result (list new)))
               ;; Update the stack
               (push (cons (cdr lst-item) new) state)))))
          ;; Not a list item - just push it onto the result, always
          ;; empty the list state
          (t
           (setq state '())
           (setq result (append result (list token))))))
      (setq docptr (cdr docptr)))
    result))
}}}

== Reuse ==

The code is designed to be reused in differing circumstances, it is split into:

* a tokenizer {{{creole-tokenizer}}} which produces a list of tokens representing the input document
** Inline markup inside a paragraph is NOT converted.
* a //parser// {{{creole-structure}}} which takes a tokenizer list and returns a parsed representation
** note it's only creole lists that need this //parsing// step
* an HTML exporter {{{creole-html}}} which outputs HTML from a WikiCreole source buffer
** it always outputs to the same buffer right now, obviously changes coming here
** it also has an interactive output option
* a user tool {{{creole-wiki}}} which can take lots of customization options
